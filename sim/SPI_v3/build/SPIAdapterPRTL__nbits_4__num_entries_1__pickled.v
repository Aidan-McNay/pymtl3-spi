//-------------------------------------------------------------------------
// SPIAdapterPRTL__nbits_4__num_entries_1.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL BitStruct MisoMsg__val_1__spc_1__data_2 Definition
typedef struct packed {
  logic [0:0] val;
  logic [0:0] spc;
  logic [1:0] data;
} MisoMsg__val_1__spc_1__data_2;

// PyMTL BitStruct MosiMsg__val_wrt_1__val_rd_1__data_2 Definition
typedef struct packed {
  logic [0:0] val_wrt;
  logic [0:0] val_rd;
  logic [1:0] data;
} MosiMsg__val_wrt_1__val_rd_1__data_2;

// PyMTL Component NormalQueue1EntryRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py

module NormalQueue1EntryRTL__EntryType_Bits2
(
  input  logic [0:0] clk ,
  output logic [0:0] count ,
  input  logic [0:0] reset ,
  input logic [1:0] recv__msg  ,
  output logic [0:0] recv__rdy  ,
  input logic [0:0] recv__val  ,
  output logic [1:0] send__msg  ,
  input logic [0:0] send__rdy  ,
  output logic [0:0] send__val  
);
  logic [1:0] entry;
  logic [0:0] full;

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py:41
  // s.recv.rdy //= lambda: ~s.full
  
  always_comb begin : _lambda__s_cm_q_q_recv_rdy
    recv__rdy = ~full;
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py:43
  // @update_ff
  // def ff_normal1():
  //   if s.reset:
  //     s.full <<= 0
  //   else:
  //     s.full <<= (s.recv.val & ~s.full) | (s.full & ~s.send.rdy)
  // 
  //   if s.recv.val & ~s.full:
  //     s.entry <<= s.recv.msg
  
  always_ff @(posedge clk) begin : ff_normal1
    if ( reset ) begin
      full <= 1'd0;
    end
    else
      full <= ( recv__val & ( ~full ) ) | ( full & ( ~send__rdy ) );
    if ( recv__val & ( ~full ) ) begin
      entry <= recv__msg;
    end
  end

  assign count = full;
  assign send__msg = entry;
  assign send__val = full;

endmodule


// PyMTL Component NormalQueueRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py

module NormalQueueRTL__EntryType_Bits2__num_entries_1
(
  input  logic [0:0] clk ,
  output logic [0:0] count ,
  input  logic [0:0] reset ,
  input logic [1:0] recv__msg  ,
  output logic [0:0] recv__rdy  ,
  input logic [0:0] recv__val  ,
  output logic [1:0] send__msg  ,
  input logic [0:0] send__rdy  ,
  output logic [0:0] send__val  
);
  //-------------------------------------------------------------
  // Component q
  //-------------------------------------------------------------

  logic [0:0] q__clk;
  logic [0:0] q__count;
  logic [0:0] q__reset;
  logic [1:0] q__recv__msg;
  logic [0:0] q__recv__rdy;
  logic [0:0] q__recv__val;
  logic [1:0] q__send__msg;
  logic [0:0] q__send__rdy;
  logic [0:0] q__send__val;

  NormalQueue1EntryRTL__EntryType_Bits2 q
  (
    .clk( q__clk ),
    .count( q__count ),
    .reset( q__reset ),
    .recv__msg( q__recv__msg ),
    .recv__rdy( q__recv__rdy ),
    .recv__val( q__recv__val ),
    .send__msg( q__send__msg ),
    .send__rdy( q__send__rdy ),
    .send__val( q__send__val )
  );

  //-------------------------------------------------------------
  // End of component q
  //-------------------------------------------------------------

  assign q__clk = clk;
  assign q__reset = reset;
  assign q__recv__msg = recv__msg;
  assign recv__rdy = q__recv__rdy;
  assign q__recv__val = recv__val;
  assign send__msg = q__send__msg;
  assign q__send__rdy = send__rdy;
  assign send__val = q__send__val;
  assign count = q__count;

endmodule


// PyMTL Component SPIAdapterPRTL Definition
// At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIAdapterPRTL.py

module SPIAdapterPRTL__nbits_4__num_entries_1
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] pull__en  ,
  output MisoMsg__val_1__spc_1__data_2 pull__msg  ,
  input logic [0:0] push__en  ,
  input MosiMsg__val_wrt_1__val_rd_1__data_2 push__msg  ,
  input logic [1:0] recv__msg  ,
  output logic [0:0] recv__rdy  ,
  input logic [0:0] recv__val  ,
  output logic [1:0] send__msg  ,
  input logic [0:0] send__rdy  ,
  output logic [0:0] send__val  
);
  localparam logic [0:0] __const__num_entries_at_comb_block  = 1'd1;
  logic [0:0] cm_send_rdy;
  logic [0:0] mc_recv_val;
  logic [0:0] open_entries;
  //-------------------------------------------------------------
  // Component cm_q
  //-------------------------------------------------------------

  logic [0:0] cm_q__clk;
  logic [0:0] cm_q__count;
  logic [0:0] cm_q__reset;
  logic [1:0] cm_q__recv__msg;
  logic [0:0] cm_q__recv__rdy;
  logic [0:0] cm_q__recv__val;
  logic [1:0] cm_q__send__msg;
  logic [0:0] cm_q__send__rdy;
  logic [0:0] cm_q__send__val;

  NormalQueueRTL__EntryType_Bits2__num_entries_1 cm_q
  (
    .clk( cm_q__clk ),
    .count( cm_q__count ),
    .reset( cm_q__reset ),
    .recv__msg( cm_q__recv__msg ),
    .recv__rdy( cm_q__recv__rdy ),
    .recv__val( cm_q__recv__val ),
    .send__msg( cm_q__send__msg ),
    .send__rdy( cm_q__send__rdy ),
    .send__val( cm_q__send__val )
  );

  //-------------------------------------------------------------
  // End of component cm_q
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mc_q
  //-------------------------------------------------------------

  logic [0:0] mc_q__clk;
  logic [0:0] mc_q__count;
  logic [0:0] mc_q__reset;
  logic [1:0] mc_q__recv__msg;
  logic [0:0] mc_q__recv__rdy;
  logic [0:0] mc_q__recv__val;
  logic [1:0] mc_q__send__msg;
  logic [0:0] mc_q__send__rdy;
  logic [0:0] mc_q__send__val;

  NormalQueueRTL__EntryType_Bits2__num_entries_1 mc_q
  (
    .clk( mc_q__clk ),
    .count( mc_q__count ),
    .reset( mc_q__reset ),
    .recv__msg( mc_q__recv__msg ),
    .recv__rdy( mc_q__recv__rdy ),
    .recv__val( mc_q__recv__val ),
    .send__msg( mc_q__send__msg ),
    .send__rdy( mc_q__send__rdy ),
    .send__val( mc_q__send__val )
  );

  //-------------------------------------------------------------
  // End of component mc_q
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIAdapterPRTL.py:60
  // @update
  // def comb_block():
  //   s.open_entries @= s.mc_q.count < (num_entries-1)
  //   s.mc_recv_val @= s.push.msg.val_wrt & s.push.en
  //   s.pull.msg.spc @= s.mc_q.recv.rdy & (~s.mc_q.recv.val | s.open_entries) # there is space if the queue outputs recv.rdy and if this cycle there is no valid input to queue or there are more than 1 open entries
  // 
  //   s.cm_send_rdy @= s.push.msg.val_rd & s.pull.en
  //   s.pull.msg.val @= s.cm_send_rdy & s.cm_q.send.val
  //   s.pull.msg.data @= s.cm_q.send.msg & (sext(s.pull.msg.val, s.nbits_minus2))
  
  always_comb begin : comb_block
    open_entries = mc_q__count < ( 1'( __const__num_entries_at_comb_block ) - 1'd1 );
    mc_recv_val = push__msg.val_wrt & push__en;
    pull__msg.spc = mc_q__recv__rdy & ( ( ~mc_q__recv__val ) | open_entries );
    cm_send_rdy = push__msg.val_rd & pull__en;
    pull__msg.val = cm_send_rdy & cm_q__send__val;
    pull__msg.data = cm_q__send__msg & { { 1 { pull__msg.val[0] } }, pull__msg.val };
  end

  assign mc_q__clk = clk;
  assign mc_q__reset = reset;
  assign send__val = mc_q__send__val;
  assign send__msg = mc_q__send__msg;
  assign mc_q__send__rdy = send__rdy;
  assign mc_q__recv__val = mc_recv_val;
  assign mc_q__recv__msg = push__msg.data;
  assign cm_q__clk = clk;
  assign cm_q__reset = reset;
  assign cm_q__recv__val = recv__val;
  assign recv__rdy = cm_q__recv__rdy;
  assign cm_q__recv__msg = recv__msg;
  assign cm_q__send__rdy = cm_send_rdy;

endmodule
