//-------------------------------------------------------------------------
// SPIAdapterPRTL__nbits_4__num_entries_2.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL BitStruct MisoMsg__val_1__spc_1__data_2 Definition
typedef struct packed {
  logic [0:0] val;
  logic [0:0] spc;
  logic [1:0] data;
} MisoMsg__val_1__spc_1__data_2;

// PyMTL BitStruct MosiMsg__val_wrt_1__val_rd_1__data_2 Definition
typedef struct packed {
  logic [0:0] val_wrt;
  logic [0:0] val_rd;
  logic [1:0] data;
} MosiMsg__val_wrt_1__val_rd_1__data_2;

// PyMTL Component NormalQueueCtrlRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py

module NormalQueueCtrlRTL__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  output logic [0:0] raddr ,
  output logic [0:0] recv_rdy ,
  input  logic [0:0] recv_val ,
  input  logic [0:0] reset ,
  input  logic [0:0] send_rdy ,
  output logic [0:0] send_val ,
  output logic [0:0] waddr ,
  output logic [0:0] wen 
);
  localparam logic [1:0] __const__num_entries_at__lambda__s_cm_q_ctrl_recv_rdy  = 2'd2;
  localparam logic [1:0] __const__num_entries_at_up_reg  = 2'd2;
  logic [0:0] head;
  logic [0:0] recv_xfer;
  logic [0:0] send_xfer;
  logic [0:0] tail;

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py:121
  // s.recv_rdy  //= lambda: s.count < num_entries
  
  always_comb begin : _lambda__s_cm_q_ctrl_recv_rdy
    recv_rdy = count < 2'( __const__num_entries_at__lambda__s_cm_q_ctrl_recv_rdy );
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py:124
  // s.recv_xfer //= lambda: s.recv_val & s.recv_rdy
  
  always_comb begin : _lambda__s_cm_q_ctrl_recv_xfer
    recv_xfer = recv_val & recv_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py:122
  // s.send_val  //= lambda: s.count > 0
  
  always_comb begin : _lambda__s_cm_q_ctrl_send_val
    send_val = count > 2'd0;
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py:125
  // s.send_xfer //= lambda: s.send_val & s.send_rdy
  
  always_comb begin : _lambda__s_cm_q_ctrl_send_xfer
    send_xfer = send_val & send_rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py:127
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= 0
  //     s.tail  <<= 0
  //     s.count <<= 0
  // 
  //   else:
  //     if s.recv_xfer:
  //       s.tail <<= s.tail + 1 if ( s.tail < num_entries - 1 ) else 0
  // 
  //     if s.send_xfer:
  //       s.head <<= s.head + 1 if ( s.head < num_entries -1 ) else 0
  // 
  //     if s.recv_xfer & ~s.send_xfer:
  //       s.count <<= s.count + 1
  //     elif ~s.recv_xfer & s.send_xfer:
  //       s.count <<= s.count - 1
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 1'd0;
      tail <= 1'd0;
      count <= 2'd0;
    end
    else begin
      if ( recv_xfer ) begin
        tail <= ( tail < ( 1'( __const__num_entries_at_up_reg ) - 1'd1 ) ) ? tail + 1'd1 : 1'd0;
      end
      if ( send_xfer ) begin
        head <= ( head < ( 1'( __const__num_entries_at_up_reg ) - 1'd1 ) ) ? head + 1'd1 : 1'd0;
      end
      if ( recv_xfer & ( ~send_xfer ) ) begin
        count <= count + 2'd1;
      end
      else if ( ( ~recv_xfer ) & send_xfer ) begin
        count <= count - 2'd1;
      end
    end
  end

  assign wen = recv_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_Bits2__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py

module RegisterFile__491454d2012bc297
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr [0:0],
  output logic [1:0] rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [0:0] waddr [0:0],
  input  logic [1:0] wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  logic [1:0] regs [0:1];

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1'd0; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1'd0; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py

module NormalQueueDpathRTL__EntryType_Bits2__num_entries_2
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr ,
  input  logic [1:0] recv_msg ,
  input  logic [0:0] reset ,
  output logic [1:0] send_msg ,
  input  logic [0:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component rf
  //-------------------------------------------------------------

  logic [0:0] rf__clk;
  logic [0:0] rf__raddr [0:0];
  logic [1:0] rf__rdata [0:0];
  logic [0:0] rf__reset;
  logic [0:0] rf__waddr [0:0];
  logic [1:0] rf__wdata [0:0];
  logic [0:0] rf__wen [0:0];

  RegisterFile__491454d2012bc297 rf
  (
    .clk( rf__clk ),
    .raddr( rf__raddr ),
    .rdata( rf__rdata ),
    .reset( rf__reset ),
    .waddr( rf__waddr ),
    .wdata( rf__wdata ),
    .wen( rf__wen )
  );

  //-------------------------------------------------------------
  // End of component rf
  //-------------------------------------------------------------

  assign rf__clk = clk;
  assign rf__reset = reset;
  assign rf__raddr[0] = raddr;
  assign send_msg = rf__rdata[0];
  assign rf__wen[0] = wen;
  assign rf__waddr[0] = waddr;
  assign rf__wdata[0] = recv_msg;

endmodule


// PyMTL Component NormalQueueRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/stream/queues.py

module NormalQueueRTL__EntryType_Bits2__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] reset ,
  input logic [1:0] recv__msg  ,
  output logic [0:0] recv__rdy  ,
  input logic [0:0] recv__val  ,
  output logic [1:0] send__msg  ,
  input logic [0:0] send__rdy  ,
  output logic [0:0] send__val  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [1:0] ctrl__count;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__recv_rdy;
  logic [0:0] ctrl__recv_val;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__send_rdy;
  logic [0:0] ctrl__send_val;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  NormalQueueCtrlRTL__num_entries_2 ctrl
  (
    .clk( ctrl__clk ),
    .count( ctrl__count ),
    .raddr( ctrl__raddr ),
    .recv_rdy( ctrl__recv_rdy ),
    .recv_val( ctrl__recv_val ),
    .reset( ctrl__reset ),
    .send_rdy( ctrl__send_rdy ),
    .send_val( ctrl__send_val ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  logic [0:0] dpath__raddr;
  logic [1:0] dpath__recv_msg;
  logic [0:0] dpath__reset;
  logic [1:0] dpath__send_msg;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  NormalQueueDpathRTL__EntryType_Bits2__num_entries_2 dpath
  (
    .clk( dpath__clk ),
    .raddr( dpath__raddr ),
    .recv_msg( dpath__recv_msg ),
    .reset( dpath__reset ),
    .send_msg( dpath__send_msg ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__recv_val = recv__val;
  assign recv__rdy = ctrl__recv_rdy;
  assign dpath__recv_msg = recv__msg;
  assign send__val = ctrl__send_val;
  assign ctrl__send_rdy = send__rdy;
  assign send__msg = dpath__send_msg;
  assign count = ctrl__count;

endmodule


// PyMTL Component SPIAdapterPRTL Definition
// At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIAdapterPRTL.py

module SPIAdapterPRTL__nbits_4__num_entries_2
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] pull__en  ,
  output MisoMsg__val_1__spc_1__data_2 pull__msg  ,
  input logic [0:0] push__en  ,
  input MosiMsg__val_wrt_1__val_rd_1__data_2 push__msg  ,
  input logic [1:0] recv__msg  ,
  output logic [0:0] recv__rdy  ,
  input logic [0:0] recv__val  ,
  output logic [1:0] send__msg  ,
  input logic [0:0] send__rdy  ,
  output logic [0:0] send__val  
);
  localparam logic [1:0] __const__num_entries_at_comb_block  = 2'd2;
  logic [0:0] cm_send_rdy;
  logic [0:0] mc_recv_val;
  logic [0:0] open_entries;
  //-------------------------------------------------------------
  // Component cm_q
  //-------------------------------------------------------------

  logic [0:0] cm_q__clk;
  logic [1:0] cm_q__count;
  logic [0:0] cm_q__reset;
  logic [1:0] cm_q__recv__msg;
  logic [0:0] cm_q__recv__rdy;
  logic [0:0] cm_q__recv__val;
  logic [1:0] cm_q__send__msg;
  logic [0:0] cm_q__send__rdy;
  logic [0:0] cm_q__send__val;

  NormalQueueRTL__EntryType_Bits2__num_entries_2 cm_q
  (
    .clk( cm_q__clk ),
    .count( cm_q__count ),
    .reset( cm_q__reset ),
    .recv__msg( cm_q__recv__msg ),
    .recv__rdy( cm_q__recv__rdy ),
    .recv__val( cm_q__recv__val ),
    .send__msg( cm_q__send__msg ),
    .send__rdy( cm_q__send__rdy ),
    .send__val( cm_q__send__val )
  );

  //-------------------------------------------------------------
  // End of component cm_q
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mc_q
  //-------------------------------------------------------------

  logic [0:0] mc_q__clk;
  logic [1:0] mc_q__count;
  logic [0:0] mc_q__reset;
  logic [1:0] mc_q__recv__msg;
  logic [0:0] mc_q__recv__rdy;
  logic [0:0] mc_q__recv__val;
  logic [1:0] mc_q__send__msg;
  logic [0:0] mc_q__send__rdy;
  logic [0:0] mc_q__send__val;

  NormalQueueRTL__EntryType_Bits2__num_entries_2 mc_q
  (
    .clk( mc_q__clk ),
    .count( mc_q__count ),
    .reset( mc_q__reset ),
    .recv__msg( mc_q__recv__msg ),
    .recv__rdy( mc_q__recv__rdy ),
    .recv__val( mc_q__recv__val ),
    .send__msg( mc_q__send__msg ),
    .send__rdy( mc_q__send__rdy ),
    .send__val( mc_q__send__val )
  );

  //-------------------------------------------------------------
  // End of component mc_q
  //-------------------------------------------------------------

  // PyMTL Update Block Source
  // At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIAdapterPRTL.py:60
  // @update
  // def comb_block():
  //   s.open_entries @= s.mc_q.count < (num_entries-1)
  //   s.mc_recv_val @= s.push.msg.val_wrt & s.push.en
  //   s.pull.msg.spc @= s.mc_q.recv.rdy & (~s.mc_q.recv.val | s.open_entries) # there is space if the queue outputs recv.rdy and if this cycle there is no valid input to queue or there are more than 1 open entries
  // 
  //   s.cm_send_rdy @= s.push.msg.val_rd & s.pull.en
  //   s.pull.msg.val @= s.cm_send_rdy & s.cm_q.send.val
  //   s.pull.msg.data @= s.cm_q.send.msg & (sext(s.pull.msg.val, s.nbits_minus2))
  
  always_comb begin : comb_block
    open_entries = mc_q__count < ( 2'( __const__num_entries_at_comb_block ) - 2'd1 );
    mc_recv_val = push__msg.val_wrt & push__en;
    pull__msg.spc = mc_q__recv__rdy & ( ( ~mc_q__recv__val ) | open_entries );
    cm_send_rdy = push__msg.val_rd & pull__en;
    pull__msg.val = cm_send_rdy & cm_q__send__val;
    pull__msg.data = cm_q__send__msg & { { 1 { pull__msg.val[0] } }, pull__msg.val };
  end

  assign mc_q__clk = clk;
  assign mc_q__reset = reset;
  assign send__val = mc_q__send__val;
  assign send__msg = mc_q__send__msg;
  assign mc_q__send__rdy = send__rdy;
  assign mc_q__recv__val = mc_recv_val;
  assign mc_q__recv__msg = push__msg.data;
  assign cm_q__clk = clk;
  assign cm_q__reset = reset;
  assign cm_q__recv__val = recv__val;
  assign recv__rdy = cm_q__recv__rdy;
  assign cm_q__recv__msg = recv__msg;
  assign cm_q__send__rdy = cm_send_rdy;

endmodule
