//-------------------------------------------------------------------------
// SPIPushPull2ValRdyAdapter__nbits_4__num_entries_1.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL BitStruct MosiMsg__val_wrt_1__val_rd_1__data_2 Definition
typedef struct packed {
  logic [0:0] val_wrt;
  logic [0:0] val_rd;
  logic [1:0] data;
} MosiMsg__val_wrt_1__val_rd_1__data_2;

// PyMTL BitStruct MisoMsg__val_1__spc_1__data_2 Definition
typedef struct packed {
  logic [0:0] val;
  logic [0:0] spc;
  logic [1:0] data;
} MisoMsg__val_1__spc_1__data_2;

// PyMTL Component NormalQueue1EntryRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueue1EntryRTL__EntryType_2
(
  input  logic [0:0] clk ,
  output logic [0:0] count ,
  input  logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output logic [1:0] deq__ret  ,
  input logic [0:0] enq__en  ,
  input logic [1:0] enq__msg  ,
  output logic [0:0] enq__rdy  
);
  logic [1:0] entry;
  logic [0:0] full;

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:453
  // s.deq.rdy //= lambda: ~s.reset & s.full
  
  always_comb begin : _lambda__s_cm_q_q_deq_rdy
    deq__rdy = ( ~reset ) & full;
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:452
  // s.enq.rdy //= lambda: ~s.reset & ~s.full
  
  always_comb begin : _lambda__s_cm_q_q_enq_rdy
    enq__rdy = ( ~reset ) & ( ~full );
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:455
  // @update_ff
  // def ff_normal1():
  //   s.full <<= ~s.reset & ( ~s.deq.en & (s.enq.en | s.full) )
  //   if s.enq.en:
  //     s.entry <<= s.enq.msg
  
  always_ff @(posedge clk) begin : ff_normal1
    full <= ( ~reset ) & ( ( ~deq__en ) & ( enq__en | full ) );
    if ( enq__en ) begin
      entry <= enq__msg;
    end
  end

  assign count = full;
  assign deq__ret = entry;

endmodule


// PyMTL Component NormalQueueRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueueRTL__EntryType_2__num_entries_1
(
  input  logic [0:0] clk ,
  output logic [0:0] count ,
  input  logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output logic [1:0] deq__ret  ,
  input logic [0:0] enq__en  ,
  input logic [1:0] enq__msg  ,
  output logic [0:0] enq__rdy  
);
  //-------------------------------------------------------------
  // Component q
  //-------------------------------------------------------------

  logic [0:0] q__clk;
  logic [0:0] q__count;
  logic [0:0] q__reset;
  logic [0:0] q__deq__en;
  logic [0:0] q__deq__rdy;
  logic [1:0] q__deq__ret;
  logic [0:0] q__enq__en;
  logic [1:0] q__enq__msg;
  logic [0:0] q__enq__rdy;

  NormalQueue1EntryRTL__EntryType_2 q
  (
    .clk( q__clk ),
    .count( q__count ),
    .reset( q__reset ),
    .deq__en( q__deq__en ),
    .deq__rdy( q__deq__rdy ),
    .deq__ret( q__deq__ret ),
    .enq__en( q__enq__en ),
    .enq__msg( q__enq__msg ),
    .enq__rdy( q__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component q
  //-------------------------------------------------------------

  assign q__clk = clk;
  assign q__reset = reset;
  assign q__enq__en = enq__en;
  assign q__enq__msg = enq__msg;
  assign enq__rdy = q__enq__rdy;
  assign q__deq__en = deq__en;
  assign deq__rdy = q__deq__rdy;
  assign deq__ret = q__deq__ret;
  assign count = q__count;

endmodule


// PyMTL Component SPIPushPull2ValRdyAdapter Definition
// At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIPushPull2ValRdyAdapter.py

module SPIPushPull2ValRdyAdapter__nbits_4__num_entries_1
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] pull__en  ,
  input MosiMsg__val_wrt_1__val_rd_1__data_2 pull__msg  ,
  input logic [0:0] push__en  ,
  output MisoMsg__val_1__spc_1__data_2 push__msg  ,
  input logic [0:0] recv__en  ,
  input logic [1:0] recv__msg  ,
  output logic [0:0] recv__rdy  ,
  output logic [0:0] send__en  ,
  output logic [1:0] send__msg  ,
  input logic [0:0] send__rdy  
);
  localparam logic [0:0] __const__num_entries_at_comb_block  = 1'd1;
  logic [0:0] cm_deq_en;
  logic [0:0] mc_enq_en;
  logic [0:0] open_entries;
  //-------------------------------------------------------------
  // Component cm_q
  //-------------------------------------------------------------

  logic [0:0] cm_q__clk;
  logic [0:0] cm_q__count;
  logic [0:0] cm_q__reset;
  logic [0:0] cm_q__deq__en;
  logic [0:0] cm_q__deq__rdy;
  logic [1:0] cm_q__deq__ret;
  logic [0:0] cm_q__enq__en;
  logic [1:0] cm_q__enq__msg;
  logic [0:0] cm_q__enq__rdy;

  NormalQueueRTL__EntryType_2__num_entries_1 cm_q
  (
    .clk( cm_q__clk ),
    .count( cm_q__count ),
    .reset( cm_q__reset ),
    .deq__en( cm_q__deq__en ),
    .deq__rdy( cm_q__deq__rdy ),
    .deq__ret( cm_q__deq__ret ),
    .enq__en( cm_q__enq__en ),
    .enq__msg( cm_q__enq__msg ),
    .enq__rdy( cm_q__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component cm_q
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mc_q
  //-------------------------------------------------------------

  logic [0:0] mc_q__clk;
  logic [0:0] mc_q__count;
  logic [0:0] mc_q__reset;
  logic [0:0] mc_q__deq__en;
  logic [0:0] mc_q__deq__rdy;
  logic [1:0] mc_q__deq__ret;
  logic [0:0] mc_q__enq__en;
  logic [1:0] mc_q__enq__msg;
  logic [0:0] mc_q__enq__rdy;

  NormalQueueRTL__EntryType_2__num_entries_1 mc_q
  (
    .clk( mc_q__clk ),
    .count( mc_q__count ),
    .reset( mc_q__reset ),
    .deq__en( mc_q__deq__en ),
    .deq__rdy( mc_q__deq__rdy ),
    .deq__ret( mc_q__deq__ret ),
    .enq__en( mc_q__enq__en ),
    .enq__msg( mc_q__enq__msg ),
    .enq__rdy( mc_q__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component mc_q
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIPushPull2ValRdyAdapter.py:54
  // s.cm_q.enq.en //= lambda: s.recv.en & s.cm_q.enq.rdy
  
  always_comb begin : _lambda__s_cm_q_enq_en
    cm_q__enq__en = recv__en & cm_q__enq__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIPushPull2ValRdyAdapter.py:49
  // s.mc_q.deq.en //= lambda: s.send.en & s.send.rdy
  
  always_comb begin : _lambda__s_mc_q_deq_en
    mc_q__deq__en = send__en & send__rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIPushPull2ValRdyAdapter.py:60
  // @update
  // def comb_block():
  //   s.open_entries @= s.mc_q.count < num_entries-1
  //   s.mc_enq_en @= s.mc_q.enq.rdy & s.pull.msg.val_wrt & s.pull.en
  //   s.push.msg.spc @= s.mc_q.enq.rdy & (~s.mc_q.enq.en | s.open_entries)
  // 
  //   s.cm_deq_en @= s.cm_q.deq.rdy & s.pull.msg.val_rd & s.push.en & s.pull.en
  //   s.push.msg.val @= s.cm_deq_en
  
  always_comb begin : comb_block
    open_entries = mc_q__count < ( 1'( __const__num_entries_at_comb_block ) - 1'd1 );
    mc_enq_en = ( mc_q__enq__rdy & pull__msg.val_wrt ) & pull__en;
    push__msg.spc = mc_q__enq__rdy & ( ( ~mc_q__enq__en ) | open_entries );
    cm_deq_en = ( ( cm_q__deq__rdy & pull__msg.val_rd ) & push__en ) & pull__en;
    push__msg.val = cm_deq_en;
  end

  assign mc_q__clk = clk;
  assign mc_q__reset = reset;
  assign send__en = mc_q__deq__rdy;
  assign send__msg = mc_q__deq__ret;
  assign mc_q__enq__en = mc_enq_en;
  assign mc_q__enq__msg = pull__msg.data;
  assign cm_q__clk = clk;
  assign cm_q__reset = reset;
  assign recv__rdy = cm_q__enq__rdy;
  assign cm_q__enq__msg = recv__msg;
  assign cm_q__deq__en = cm_deq_en;
  assign push__msg.data = cm_q__deq__ret;

endmodule
