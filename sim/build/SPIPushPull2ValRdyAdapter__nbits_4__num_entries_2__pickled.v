//-------------------------------------------------------------------------
// SPIPushPull2ValRdyAdapter__nbits_4__num_entries_2.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL BitStruct MosiMsg__val_wrt_1__val_rd_1__data_2 Definition
typedef struct packed {
  logic [0:0] val_wrt;
  logic [0:0] val_rd;
  logic [1:0] data;
} MosiMsg__val_wrt_1__val_rd_1__data_2;

// PyMTL BitStruct MisoMsg__val_1__spc_1__data_2 Definition
typedef struct packed {
  logic [0:0] val;
  logic [0:0] spc;
  logic [1:0] data;
} MisoMsg__val_1__spc_1__data_2;

// PyMTL Component NormalQueueCtrlRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueueCtrlRTL__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] deq_en ,
  output logic [0:0] deq_rdy ,
  input  logic [0:0] enq_en ,
  output logic [0:0] enq_rdy ,
  output logic [0:0] raddr ,
  input  logic [0:0] reset ,
  output logic [0:0] waddr ,
  output logic [0:0] wen 
);
  logic [0:0] deq_xfer;
  logic [0:0] enq_xfer;
  logic [0:0] head;
  logic [0:0] tail;

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:84
  // s.deq_rdy //= lambda: ~s.reset & ( s.count > CountType(0) )
  
  always_comb begin : _lambda__s_cm_q_ctrl_deq_rdy
    deq_rdy = ( ~reset ) & ( count > 2'd0 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:87
  // s.deq_xfer //= lambda: s.deq_en & s.deq_rdy
  
  always_comb begin : _lambda__s_cm_q_ctrl_deq_xfer
    deq_xfer = deq_en & deq_rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:83
  // s.enq_rdy //= lambda: ~s.reset & ( s.count < s.num_entries )
  
  always_comb begin : _lambda__s_cm_q_ctrl_enq_rdy
    enq_rdy = ( ~reset ) & ( count < 2'd2 );
  end

  // PyMTL Lambda Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:86
  // s.enq_xfer //= lambda: s.enq_en & s.enq_rdy
  
  always_comb begin : _lambda__s_cm_q_ctrl_enq_xfer
    enq_xfer = enq_en & enq_rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py:89
  // @update_ff
  // def up_reg():
  // 
  //   if s.reset:
  //     s.head  <<= PtrType(0)
  //     s.tail  <<= PtrType(0)
  //     s.count <<= CountType(0)
  // 
  //   else:
  //     if s.deq_xfer:
  //       s.head <<= s.head + PtrType(1) if s.head < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer:
  //       s.tail <<= s.tail + PtrType(1) if s.tail < s.last_idx else PtrType(0)
  // 
  //     if s.enq_xfer & ~s.deq_xfer:
  //       s.count <<= s.count + CountType(1)
  //     if ~s.enq_xfer & s.deq_xfer:
  //       s.count <<= s.count - CountType(1)
  
  always_ff @(posedge clk) begin : up_reg
    if ( reset ) begin
      head <= 1'd0;
      tail <= 1'd0;
      count <= 2'd0;
    end
    else begin
      if ( deq_xfer ) begin
        head <= ( head < 1'd1 ) ? head + 1'd1 : 1'd0;
      end
      if ( enq_xfer ) begin
        tail <= ( tail < 1'd1 ) ? tail + 1'd1 : 1'd0;
      end
      if ( enq_xfer & ( ~deq_xfer ) ) begin
        count <= count + 2'd1;
      end
      if ( ( ~enq_xfer ) & deq_xfer ) begin
        count <= count - 2'd1;
      end
    end
  end

  assign wen = enq_xfer;
  assign waddr = tail;
  assign raddr = head;

endmodule


// PyMTL Component RegisterFile Definition
// Full name: RegisterFile__Type_2__nregs_2__rd_ports_1__wr_ports_1__const_zero_False
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py

module RegisterFile__35d475a83344a496
(
  input  logic [0:0] clk ,
  input  logic [0:0] raddr [0:0],
  output logic [1:0] rdata [0:0],
  input  logic [0:0] reset ,
  input  logic [0:0] waddr [0:0],
  input  logic [1:0] wdata [0:0],
  input  logic [0:0] wen [0:0]
);
  localparam logic [0:0] __const__rd_ports_at_up_rf_read  = 1'd1;
  localparam logic [0:0] __const__wr_ports_at_up_rf_write  = 1'd1;
  logic [1:0] regs [0:1];

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:20
  // @update
  // def up_rf_read():
  //   for i in range( rd_ports ):
  //     s.rdata[i] @= s.regs[ s.raddr[i] ]
  
  always_comb begin : up_rf_read
    for ( int unsigned i = 1'd0; i < 1'( __const__rd_ports_at_up_rf_read ); i += 1'd1 )
      rdata[1'(i)] = regs[raddr[1'(i)]];
  end

  // PyMTL Update Block Source
  // At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/basic_rtl/register_files.py:32
  // @update_ff
  // def up_rf_write():
  //   for i in range( wr_ports ):
  //     if s.wen[i]:
  //       s.regs[ s.waddr[i] ] <<= s.wdata[i]
  
  always_ff @(posedge clk) begin : up_rf_write
    for ( int unsigned i = 1'd0; i < 1'( __const__wr_ports_at_up_rf_write ); i += 1'd1 )
      if ( wen[1'(i)] ) begin
        regs[waddr[1'(i)]] <= wdata[1'(i)];
      end
  end

endmodule


// PyMTL Component NormalQueueDpathRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueueDpathRTL__EntryType_2__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [1:0] deq_ret ,
  input  logic [1:0] enq_msg ,
  input  logic [0:0] raddr ,
  input  logic [0:0] reset ,
  input  logic [0:0] waddr ,
  input  logic [0:0] wen 
);
  //-------------------------------------------------------------
  // Component queue
  //-------------------------------------------------------------

  logic [0:0] queue__clk;
  logic [0:0] queue__raddr [0:0];
  logic [1:0] queue__rdata [0:0];
  logic [0:0] queue__reset;
  logic [0:0] queue__waddr [0:0];
  logic [1:0] queue__wdata [0:0];
  logic [0:0] queue__wen [0:0];

  RegisterFile__35d475a83344a496 queue
  (
    .clk( queue__clk ),
    .raddr( queue__raddr ),
    .rdata( queue__rdata ),
    .reset( queue__reset ),
    .waddr( queue__waddr ),
    .wdata( queue__wdata ),
    .wen( queue__wen )
  );

  //-------------------------------------------------------------
  // End of component queue
  //-------------------------------------------------------------

  assign queue__clk = clk;
  assign queue__reset = reset;
  assign queue__raddr[0] = raddr;
  assign deq_ret = queue__rdata[0];
  assign queue__wen[0] = wen;
  assign queue__waddr[0] = waddr;
  assign queue__wdata[0] = enq_msg;

endmodule


// PyMTL Component NormalQueueRTL Definition
// At /work/global/brg/install/venv-pkgs/x86_64-centos7/python3.7.4/lib/python3.7/site-packages/pymtl3/stdlib/queues/queues.py

module NormalQueueRTL__EntryType_2__num_entries_2
(
  input  logic [0:0] clk ,
  output logic [1:0] count ,
  input  logic [0:0] reset ,
  input logic [0:0] deq__en  ,
  output logic [0:0] deq__rdy  ,
  output logic [1:0] deq__ret  ,
  input logic [0:0] enq__en  ,
  input logic [1:0] enq__msg  ,
  output logic [0:0] enq__rdy  
);
  //-------------------------------------------------------------
  // Component ctrl
  //-------------------------------------------------------------

  logic [0:0] ctrl__clk;
  logic [1:0] ctrl__count;
  logic [0:0] ctrl__deq_en;
  logic [0:0] ctrl__deq_rdy;
  logic [0:0] ctrl__enq_en;
  logic [0:0] ctrl__enq_rdy;
  logic [0:0] ctrl__raddr;
  logic [0:0] ctrl__reset;
  logic [0:0] ctrl__waddr;
  logic [0:0] ctrl__wen;

  NormalQueueCtrlRTL__num_entries_2 ctrl
  (
    .clk( ctrl__clk ),
    .count( ctrl__count ),
    .deq_en( ctrl__deq_en ),
    .deq_rdy( ctrl__deq_rdy ),
    .enq_en( ctrl__enq_en ),
    .enq_rdy( ctrl__enq_rdy ),
    .raddr( ctrl__raddr ),
    .reset( ctrl__reset ),
    .waddr( ctrl__waddr ),
    .wen( ctrl__wen )
  );

  //-------------------------------------------------------------
  // End of component ctrl
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component dpath
  //-------------------------------------------------------------

  logic [0:0] dpath__clk;
  logic [1:0] dpath__deq_ret;
  logic [1:0] dpath__enq_msg;
  logic [0:0] dpath__raddr;
  logic [0:0] dpath__reset;
  logic [0:0] dpath__waddr;
  logic [0:0] dpath__wen;

  NormalQueueDpathRTL__EntryType_2__num_entries_2 dpath
  (
    .clk( dpath__clk ),
    .deq_ret( dpath__deq_ret ),
    .enq_msg( dpath__enq_msg ),
    .raddr( dpath__raddr ),
    .reset( dpath__reset ),
    .waddr( dpath__waddr ),
    .wen( dpath__wen )
  );

  //-------------------------------------------------------------
  // End of component dpath
  //-------------------------------------------------------------

  assign ctrl__clk = clk;
  assign ctrl__reset = reset;
  assign dpath__clk = clk;
  assign dpath__reset = reset;
  assign dpath__wen = ctrl__wen;
  assign dpath__waddr = ctrl__waddr;
  assign dpath__raddr = ctrl__raddr;
  assign ctrl__enq_en = enq__en;
  assign enq__rdy = ctrl__enq_rdy;
  assign ctrl__deq_en = deq__en;
  assign deq__rdy = ctrl__deq_rdy;
  assign count = ctrl__count;
  assign dpath__enq_msg = enq__msg;
  assign deq__ret = dpath__deq_ret;

endmodule


// PyMTL Component SPIPushPull2ValRdyAdapter Definition
// At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIPushPull2ValRdyAdapter.py

module SPIPushPull2ValRdyAdapter__nbits_4__num_entries_2
(
  input  logic [0:0] clk ,
  input  logic [0:0] reset ,
  input logic [0:0] pull__en  ,
  input MosiMsg__val_wrt_1__val_rd_1__data_2 pull__msg  ,
  input logic [0:0] push__en  ,
  output MisoMsg__val_1__spc_1__data_2 push__msg  ,
  input logic [0:0] recv__en  ,
  input logic [1:0] recv__msg  ,
  output logic [0:0] recv__rdy  ,
  output logic [0:0] send__en  ,
  output logic [1:0] send__msg  ,
  input logic [0:0] send__rdy  
);
  localparam logic [1:0] __const__num_entries_at_comb_block  = 2'd2;
  logic [0:0] cm_deq_en;
  logic [0:0] mc_enq_en;
  logic [0:0] open_entries;
  //-------------------------------------------------------------
  // Component cm_q
  //-------------------------------------------------------------

  logic [0:0] cm_q__clk;
  logic [1:0] cm_q__count;
  logic [0:0] cm_q__reset;
  logic [0:0] cm_q__deq__en;
  logic [0:0] cm_q__deq__rdy;
  logic [1:0] cm_q__deq__ret;
  logic [0:0] cm_q__enq__en;
  logic [1:0] cm_q__enq__msg;
  logic [0:0] cm_q__enq__rdy;

  NormalQueueRTL__EntryType_2__num_entries_2 cm_q
  (
    .clk( cm_q__clk ),
    .count( cm_q__count ),
    .reset( cm_q__reset ),
    .deq__en( cm_q__deq__en ),
    .deq__rdy( cm_q__deq__rdy ),
    .deq__ret( cm_q__deq__ret ),
    .enq__en( cm_q__enq__en ),
    .enq__msg( cm_q__enq__msg ),
    .enq__rdy( cm_q__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component cm_q
  //-------------------------------------------------------------

  //-------------------------------------------------------------
  // Component mc_q
  //-------------------------------------------------------------

  logic [0:0] mc_q__clk;
  logic [1:0] mc_q__count;
  logic [0:0] mc_q__reset;
  logic [0:0] mc_q__deq__en;
  logic [0:0] mc_q__deq__rdy;
  logic [1:0] mc_q__deq__ret;
  logic [0:0] mc_q__enq__en;
  logic [1:0] mc_q__enq__msg;
  logic [0:0] mc_q__enq__rdy;

  NormalQueueRTL__EntryType_2__num_entries_2 mc_q
  (
    .clk( mc_q__clk ),
    .count( mc_q__count ),
    .reset( mc_q__reset ),
    .deq__en( mc_q__deq__en ),
    .deq__rdy( mc_q__deq__rdy ),
    .deq__ret( mc_q__deq__ret ),
    .enq__en( mc_q__enq__en ),
    .enq__msg( mc_q__enq__msg ),
    .enq__rdy( mc_q__enq__rdy )
  );

  //-------------------------------------------------------------
  // End of component mc_q
  //-------------------------------------------------------------

  // PyMTL Lambda Block Source
  // At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIPushPull2ValRdyAdapter.py:54
  // s.cm_q.enq.en //= lambda: s.recv.en & s.cm_q.enq.rdy
  
  always_comb begin : _lambda__s_cm_q_enq_en
    cm_q__enq__en = recv__en & cm_q__enq__rdy;
  end

  // PyMTL Lambda Block Source
  // At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIPushPull2ValRdyAdapter.py:49
  // s.mc_q.deq.en //= lambda: s.send.en & s.send.rdy
  
  always_comb begin : _lambda__s_mc_q_deq_en
    mc_q__deq__en = send__en & send__rdy;
  end

  // PyMTL Update Block Source
  // At /work/global/ki88/spi_minion_fork/sim/SPI_v3/components/SPIPushPull2ValRdyAdapter.py:60
  // @update
  // def comb_block():
  //   s.open_entries @= s.mc_q.count < num_entries-1
  //   s.mc_enq_en @= s.mc_q.enq.rdy & s.pull.msg.val_wrt & s.pull.en
  //   s.push.msg.spc @= s.mc_q.enq.rdy & (~s.mc_q.enq.en | s.open_entries)
  // 
  //   s.cm_deq_en @= s.cm_q.deq.rdy & s.pull.msg.val_rd & s.push.en & s.pull.en
  //   s.push.msg.val @= s.cm_deq_en
  
  always_comb begin : comb_block
    open_entries = mc_q__count < ( 2'( __const__num_entries_at_comb_block ) - 2'd1 );
    mc_enq_en = ( mc_q__enq__rdy & pull__msg.val_wrt ) & pull__en;
    push__msg.spc = mc_q__enq__rdy & ( ( ~mc_q__enq__en ) | open_entries );
    cm_deq_en = ( ( cm_q__deq__rdy & pull__msg.val_rd ) & push__en ) & pull__en;
    push__msg.val = cm_deq_en;
  end

  assign mc_q__clk = clk;
  assign mc_q__reset = reset;
  assign send__en = mc_q__deq__rdy;
  assign send__msg = mc_q__deq__ret;
  assign mc_q__enq__en = mc_enq_en;
  assign mc_q__enq__msg = pull__msg.data;
  assign cm_q__clk = clk;
  assign cm_q__reset = reset;
  assign recv__rdy = cm_q__enq__rdy;
  assign cm_q__enq__msg = recv__msg;
  assign cm_q__deq__en = cm_deq_en;
  assign push__msg.data = cm_q__deq__ret;

endmodule
